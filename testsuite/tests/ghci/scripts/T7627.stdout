type () :: *
data () = ()
  	-- Defined in ‘GHC.Tuple’
instance Monoid () -- Defined in ‘GHC.Base’
instance Semigroup () -- Defined in ‘GHC.Base’
instance Bounded () -- Defined in ‘GHC.Enum’
instance Read () -- Defined in ‘GHC.Read’
instance Enum () -- Defined in ‘GHC.Enum’
instance Show () -- Defined in ‘GHC.Show’
instance Eq () -- Defined in ‘GHC.Classes’
instance Ord () -- Defined in ‘GHC.Classes’
type (##) :: GHC.Types.ZeroBitType
data (##) = (##)
  	-- Defined in ‘GHC.Prim’
() :: ()
(##) :: (# #)
(   ) :: ()
(#   #) :: (# #)
type (,) :: * -> * -> *
data (,) a b = (,) a b
  	-- Defined in ‘GHC.Tuple’
instance Traversable ((,) a) -- Defined in ‘Data.Traversable’
instance (Monoid a, Monoid b) => Monoid (a, b)
  -- Defined in ‘GHC.Base’
instance (Semigroup a, Semigroup b) => Semigroup (a, b)
  -- Defined in ‘GHC.Base’
instance Foldable ((,) a) -- Defined in ‘Data.Foldable’
instance (Bounded a, Bounded b) => Bounded (a, b)
  -- Defined in ‘GHC.Enum’
instance (Eq a, Eq b) => Eq (a, b) -- Defined in ‘GHC.Classes’
instance (Ord a, Ord b) => Ord (a, b) -- Defined in ‘GHC.Classes’
instance (Read a, Read b) => Read (a, b) -- Defined in ‘GHC.Read’
instance (Show a, Show b) => Show (a, b) -- Defined in ‘GHC.Show’
instance Monoid a => Applicative ((,) a) -- Defined in ‘GHC.Base’
instance Functor ((,) a) -- Defined in ‘GHC.Base’
instance Monoid a => Monad ((,) a) -- Defined in ‘GHC.Base’
type (#,#) :: *
              -> *
              -> TYPE
                   ('GHC.Types.TupleRep '[GHC.Types.LiftedRep, GHC.Types.LiftedRep])
data (#,#) a b = (#,#) a b
  	-- Defined in ‘GHC.Prim’
(,) :: a -> b -> (a, b)
(#,#) :: a -> b -> (# a, b #)
(  ,  ) :: a -> b -> (a, b)
(#  ,  #) :: a -> b -> (# a, b #)
