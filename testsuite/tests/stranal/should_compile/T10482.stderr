
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 162, types: 105, coercions: 21, joins: 0/0}

-- RHS size: {terms: 13, types: 12, coercions: 4, joins: 0/0}
T10482.$WFooPair [InlPrag=INLINE[final] CONLIKE] :: forall a b. Foo a %1 -> Foo b %1 -> Foo (a, b)
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<SL><SL>,
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@a_atR) (@b_atS) (dt_aTq [Occ=Once1] :: Foo a_atR) (dt_aTr [Occ=Once1] :: Foo b_atS) ->
                 (case dt_aTq of dt_X0 [Occ=Once1] { __DEFAULT ->
                  case dt_aTr of dt_X1 [Occ=Once1] { __DEFAULT -> T10482.FooPair @a_atR @b_atS dt_X0 dt_X1 }
                  })
                 `cast` (Sym (T10482.D:R:Foo(,)0[0] <a_atR>_N <b_atS>_N) :: T10482.R:Foo(,) a_atR b_atS ~R# Foo (a_atR, b_atS))}]
T10482.$WFooPair
  = \ (@a_atR) (@b_atS) (dt_aTq [Occ=Once1] :: Foo a_atR) (dt_aTr [Occ=Once1] :: Foo b_atS) ->
      (case dt_aTq of dt_X0 [Occ=Once1] { __DEFAULT ->
       case dt_aTr of dt_X1 [Occ=Once1] { __DEFAULT -> T10482.FooPair @a_atR @b_atS dt_X0 dt_X1 }
       })
      `cast` (Sym (T10482.D:R:Foo(,)0[0] <a_atR>_N <b_atS>_N) :: T10482.R:Foo(,) a_atR b_atS ~R# Foo (a_atR, b_atS))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10482.$trModule4 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T10482.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.$trModule3 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$trModule3 = GHC.Types.TrNameS T10482.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10482.$trModule2 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
T10482.$trModule2 = "T10482"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.$trModule1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$trModule1 = GHC.Types.TrNameS T10482.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T10482.$trModule :: GHC.Types.Module
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$trModule = GHC.Types.Module T10482.$trModule3 T10482.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r128 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r128 = GHC.Types.KindRepTyConApp GHC.Types.$tcInt (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1_r129 :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r129 = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2_r12a :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r12a = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_r12b :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep3_r12b = GHC.Types.: @GHC.Types.KindRep $krep1_r129 (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r12c :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep4_r12c = GHC.Types.: @GHC.Types.KindRep $krep2_r12a $krep3_r12b

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r12d :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep5_r12d = GHC.Types.KindRepTyConApp GHC.Tuple.$tc(,) $krep4_r12c

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10482.$tcFoo2 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T10482.$tcFoo2 = "Foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.$tcFoo1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tcFoo1 = GHC.Types.TrNameS T10482.$tcFoo2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
T10482.$tcFoo :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tcFoo = GHC.Types.TyCon 3311038889639791302## 7944995683507700778## T10482.$trModule T10482.$tcFoo1 0# GHC.Types.krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r12e :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep6_r12e = GHC.Types.: @GHC.Types.KindRep $krep2_r12a (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r12f :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep7_r12f = GHC.Types.KindRepTyConApp T10482.$tcFoo $krep6_r12e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r12g :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep8_r12g = GHC.Types.KindRepTyConApp T10482.$tcFoo $krep3_r12b

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r12h :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep9_r12h = GHC.Types.: @GHC.Types.KindRep $krep5_r12d (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r12i :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep10_r12i = GHC.Types.KindRepTyConApp T10482.$tcFoo $krep9_r12h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r12j :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep11_r12j = GHC.Types.KindRepFun $krep8_r12g $krep10_r12i

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'FooPair1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
T10482.$tc'FooPair1 = GHC.Types.KindRepFun $krep7_r12f $krep11_r12j

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_r12k :: [GHC.Types.KindRep]
[GblId, Unf=OtherCon []]
$krep12_r12k = GHC.Types.: @GHC.Types.KindRep $krep_r128 (GHC.Types.[] @GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r12l :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep13_r12l = GHC.Types.KindRepTyConApp T10482.$tcFoo $krep12_r12k

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'Foo1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Unf=OtherCon []]
T10482.$tc'Foo1 = GHC.Types.KindRepFun $krep_r128 $krep13_r12l

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'FooPair3 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
T10482.$tc'FooPair3 = "'FooPair"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'FooPair2 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tc'FooPair2 = GHC.Types.TrNameS T10482.$tc'FooPair3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'FooPair :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tc'FooPair
  = GHC.Types.TyCon 5329411373903054066## 1455261321638291317## T10482.$trModule T10482.$tc'FooPair2 2# T10482.$tc'FooPair1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'Foo3 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T10482.$tc'Foo3 = "'Foo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'Foo2 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tc'Foo2 = GHC.Types.TrNameS T10482.$tc'Foo3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
T10482.$tc'Foo :: GHC.Types.TyCon
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.$tc'Foo = GHC.Types.TyCon 5096937192618987042## 15136671864408054946## T10482.$trModule T10482.$tc'Foo2 0# T10482.$tc'Foo1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10482.foo1 :: Int
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10482.foo1 = GHC.Types.I# 0#

Rec {
-- RHS size: {terms: 29, types: 29, coercions: 17, joins: 0/0}
foo [Occ=LoopBreaker] :: Foo ((Int, Int), Int) -> Int -> Int
[GblId,
 Arity=2,
 Str=<1P(SP(L,A),A)><1P(1L)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (f_atT [Occ=Once1!] :: Foo ((Int, Int), Int)) (k_atU [Occ=Once1!] :: Int) ->
                 case f_atT `cast` (T10482.D:R:Foo(,)0[0] <(Int, Int)>_N <Int>_N :: Foo ((Int, Int), Int) ~R# T10482.R:Foo(,) (Int, Int) Int)
                 of nt_s10X [Occ=Once1]
                 { FooPair ipv_s10Y [Occ=Once1!] _ [Occ=Dead] ->
                 case ipv_s10Y `cast` (T10482.D:R:Foo(,)0[0] <Int>_N <Int>_N :: Foo (Int, Int) ~R# T10482.R:Foo(,) Int Int) of
                 { FooPair ds_s11z [Occ=Once1] _ [Occ=Dead] ->
                 case k_atU of { GHC.Types.I# x_a115 [Occ=Once1!] ->
                 case x_a115 of wild2_X1 {
                   __DEFAULT ->
                     case GHC.Prim.remInt# wild2_X1 2# of {
                       __DEFAULT ->
                         ds_s11z
                         `cast` (T10482.D:R:FooInt0[0]
                                 ; T10482.N:R:FooInt[0]
                                 :: Foo Int ~R# Int);
                       0# ->
                         foo
                           (nt_s10X `cast` (Sym (T10482.D:R:Foo(,)0[0] <(Int, Int)>_N <Int>_N) :: T10482.R:Foo(,) (Int, Int) Int ~R# Foo ((Int, Int), Int)))
                           (GHC.Types.I# (GHC.Prim.-# wild2_X1 1#))
                     };
                   0# -> T10482.foo1
                 }
                 }
                 }
                 }}]
foo
  = \ (f_atT :: Foo ((Int, Int), Int)) (k_atU :: Int) ->
      case f_atT `cast` (T10482.D:R:Foo(,)0[0] <(Int, Int)>_N <Int>_N :: Foo ((Int, Int), Int) ~R# T10482.R:Foo(,) (Int, Int) Int)
      of nt_s10X
      { FooPair ipv_s10Y ipv1_s10Z ->
      case ipv_s10Y `cast` (T10482.D:R:Foo(,)0[0] <Int>_N <Int>_N :: Foo (Int, Int) ~R# T10482.R:Foo(,) Int Int) of
      { FooPair ds_s11T ds1_s11U ->
      case k_atU of { GHC.Types.I# x_a115 ->
      case x_a115 of wild2_X1 {
        __DEFAULT ->
          case GHC.Prim.remInt# wild2_X1 2# of {
            __DEFAULT ->
              ds_s11T
              `cast` (T10482.D:R:FooInt0[0]
                      ; T10482.N:R:FooInt[0]
                      :: Foo Int ~R# Int);
            0# ->
              foo
                (nt_s10X `cast` (Sym (T10482.D:R:Foo(,)0[0] <(Int, Int)>_N <Int>_N) :: T10482.R:Foo(,) (Int, Int) Int ~R# Foo ((Int, Int), Int)))
                (GHC.Types.I# (GHC.Prim.-# wild2_X1 1#))
          };
        0# -> T10482.foo1
      }
      }
      }
      }
end Rec }



