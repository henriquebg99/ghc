
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 28, types: 12, coercions: 0, joins: 0/0}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
F3.fac1 :: Int
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
F3.fac1 = GHC.Types.I# 1#

Rec {
-- RHS size: {terms: 20, types: 6, coercions: 0, joins: 0/0}
fac [Occ=LoopBreaker] :: Int -> Int
[GblId,
 Arity=1,
 Str=<1P(1L)>,
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x [Occ=Once1!] :: Int) ->
                 case x of { GHC.Types.I# x1 [Occ=Once1!] ->
                 case x1 of wild1 {
                   __DEFAULT -> case fac (GHC.Types.I# (GHC.Prim.-# wild1 1#)) of { GHC.Types.I# y [Occ=Once1] -> GHC.Types.I# (GHC.Prim.*# wild1 y) };
                   0# -> F3.fac1
                 }
                 }}]
fac
  = \ (x :: Int) ->
      case x of { GHC.Types.I# x1 ->
      case x1 of wild1 {
        __DEFAULT -> case fac (GHC.Types.I# (GHC.Prim.-# wild1 1#)) of { GHC.Types.I# y -> GHC.Types.I# (GHC.Prim.*# wild1 y) };
        0# -> F3.fac1
      }
      }
end Rec }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
f3 :: Int -> Int
[GblId,
 Arity=1,
 Str=<1P(1L)>,
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (y [Occ=Once1] :: Int) -> fac y}]
f3 = \ (y :: Int) -> fac y



