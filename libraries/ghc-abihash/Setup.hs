{-# LANGUAGE RecordWildCards #-}
module Main where

import Distribution.Simple
import Distribution.Simple.BuildPaths
import Distribution.Types.LocalBuildInfo
import Distribution.Verbosity
import Distribution.Simple.Program
import Distribution.Simple.PackageIndex
import Distribution.Types.InstalledPackageInfo

import System.IO
import System.Directory
import System.FilePath

main :: IO ()
main = defaultMainWithHooks ghcHooks
  where
    ghcHooks = simpleUserHooks
      { postConf = \args cfg pd lbi -> do
          ghcAutogen lbi
          postConf simpleUserHooks args cfg pd lbi
      }

ghcAutogen :: LocalBuildInfo -> IO ()
ghcAutogen lbi@LocalBuildInfo{..} = do
  let dependencyHashes = map genAbiHashes $ allPackages installedPkgs
      path = autogenPackageModulesDir lbi </> "GHC/AbiHashes.hs"
  createDirectoryIfMissing True (takeDirectory path)
  writeFile path $ unlines
    [ "module GHC.AbiHashes (ghcAbiHashes) where"
    , "import qualified GHC.Data.ShortText as ST"
    , "import GHC.Unit.Types"
    , "import qualified Data.Map as Map"
    , "import GHC.Driver.Session (LinkedAbiHashes) "
    , "-- | The ABI hashes of the GHC package and all its dependencies."
    , "-- Autogenerated by a custom Setup.hs."
    , "-- See Note [Loader Consistency Checks]"
    , "ghcAbiHashes :: LinkedAbiHashes"
    , "ghcAbiHashes = Map.fromList [ (stringToUnitId u, ST.pack hash)"
    , "                            | (unit,hash,pkg) <- " ++ show dependencyHashes
    , "                            , let u = if pkg `elem` map unitIdString wiredInUnitIds then pkg else unit] -- See Note [Wired-in units]"
    ]

genAbiHashes :: InstalledPackageInfo -> (String, String, String)
genAbiHashes InstalledPackageInfo{..} = (unUnitId installedUnitId, unAbiHash abiHash, unPackageName $ pkgName sourcePackageId)

